import os

from aiogram import types, Dispatcher, F
from aiogram.fsm.context import FSMContext

from bot_start import bot, logger
from keyboards.user.user_keyboard import back_menu_kb
from utils.aiogram_helper import SendMessage, clear_directory
from utils.pdf import convert_to_sheet
from utils.states.user import FSMStart


async def get_file(message: types.Message, state: FSMContext, album: list = None):
    try:
        os.makedirs(f'files/{message.from_user.id}')
    except Exception:
        pass
    if album:
        msg_start = await SendMessage(event=message,
                                      text=f'<b>–ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª–æ–≤: <code>{len(album)}</code>  üìÅ\n\n'
                                           f'–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É ‚öôÔ∏è\n\n</b>'
                                           '‚ùóÔ∏è<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 3-20 –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</i>',
                                      handler_name='get_file',
                                      state=state).custom_send()
        count = len(album)
        for msg in album:
            await msg.delete()
        check = 0
        list_names = ''
        for msg in album:
            if not (msg.document.file_name.endswith('.pdf') or msg.document.file_name.endswith('.PDF')):
                list_names += f'<code>{msg.document.file_name}</code>\n\n'
                check = 1
        if check == 1:
            await SendMessage(event=message,
                              text=f'<b>‚ùóÔ∏è–û—à–∏–±–∫–∞\n\n'
                                   f'–§–∞–π–ª—ã:\n'
                                   f'{list_names}'
                                   f'–Ω–µ —è–≤–ª—è—é—Ç—Å—è</b> <code>.pdf</code>',
                              handler_name='get_file',
                              state=state).custom_send()
            return
        names = []
        for msg in album:
            await bot.download(msg.document, f'files/{msg.from_user.id}/{msg.document.file_id}.pdf')
            names.append(msg.document.file_name)
    else:
        await message.delete()
        count = 1
        msg_start = await SendMessage(event=message,
                                      text=f'<b>–ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª–æ–≤: <code>1</code> üìÅ\n\n'
                                           f'–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É ‚öôÔ∏è\n\n</b>'
                                           '‚ùóÔ∏è<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 3-20 –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</i>',
                                      handler_name='get_file',
                                      state=state).custom_send()
        await bot.download(message.document, f'files/{message.from_user.id}/{message.document.file_id}.pdf')
        names = [message.document.file_name]
        if not (message.document.file_name.endswith('.pdf') or message.document.file_name.endswith('.PDF')):
            await SendMessage(event=message,
                              text=f'<b>‚ùóÔ∏è–û—à–∏–±–∫–∞\n\n'
                                   f'–§–∞–π–ª: <code>{message.document.file_name}</code> –Ω–µ —è–≤–ª—è–µ—Ç—Å—è</b> <code>.pdf</code>',
                              handler_name='get_file',
                              state=state).custom_send()
            return
    documents = os.listdir(f'files/{message.from_user.id}')
    await state.update_data(msg=msg_start)
    await state.set_state(FSMStart.empty)

    link_array = await convert_to_sheet(message.from_user.id,
                                        documents,
                                        names)
    if link_array is None:
        logger.error(f'convert error')
        await clear_directory(f'files/{message.from_user.id}')
        await SendMessage(event=message,
                          text=f'<b>‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>',
                          handler_name='get_file',
                          keyboard=back_menu_kb,
                          state=state).custom_send()
        return
    if type(link_array) is str:
        await SendMessage(event=message,
                          text=f'<b>‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n'
                               f'–í–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {link_array.split(";")[0]}',
                          handler_name='get_file',
                          keyboard=back_menu_kb,
                          state=state).custom_send()
        return
    else:
        link_str = ''
        for i, link in enumerate(link_array):
            if 'bad' in link:
                link_str += (f'‚ùå {i + 1}. –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ - {names[i]}\n'
                             f'–ù–µ—É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª\n\n')
            else:
                link_str += (f'üìå {i + 1}. –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ - {names[i]}\n'
                             f'üîó C—Å—ã–ª–∫–∞ -\n {link.split(";")[0]}\n\n')
        await SendMessage(event=message,
                          text=f'<b>–û–±—Ä–∞–±–æ—Ç–∫–∞ <code>{count}</code> .pdf —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üìã\n\n'
                               f'{link_str}</b>',
                          handler_name='get_file',
                          keyboard=back_menu_kb,
                          state=state).custom_send()
        await state.clear()


def register_handler(dp: Dispatcher):
    dp.message.register(get_file, F.content_type == 'document')
